apiVersion: v1
kind: Template
metadata:
  name: maven-pipeline
parameters:
- name: APP_NAME
  description: The name assigned to all of the application objects defined in this template.
  displayName: Application Name
  required: true
  value: spring-boot-sample
- name: GIT_SOURCE_URL
  description: The source URL for the application
  displayName: Source URL
  required: true
  value: ssh://git@git.sabre.com/aca/architecture-summit-2018.git
- name: GIT_SOURCE_REF
  description: The source Ref for the application
  displayName: Source Ref
  required: true
  value: master
- name: GIT_SOURCE_SECRET
  description: The secret Ref for the application
  displayName: Secret SSH key for read access to repo
  required: true
  value: architecture-summit-at-bitbucket
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec: {}
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: spring-boot-base
  spec:
    tags:
    - annotations:
        supports: java
        tags: java
        version: "1.8.0"
      from:
        kind: DockerImage
        name: fabric8/java-jboss-openjdk8-jdk:latest
      name: "1.4.0"
    - annotations:
        supports: java
        tags: builder,java
      from:
        kind: ImageStreamTag
        name: "1.4.0"
      name: latest
- kind: "BuildConfig"
  apiVersion: "v1"
  metadata:
    name: ${APP_NAME}-pipeline
  spec:
    source:
      contextDir: openshift-advanced/spring-boot-sample
      git:
        uri: ${GIT_SOURCE_URL}
        ref: master
      sourceSecret:
        name: ${GIT_SOURCE_SECRET}
      type: Git
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfilePath: openshift/maven-pipeline.groovy
        env:
          - name: "APP_NAME"
            value: ${APP_NAME}
          - name: "GIT_REF"
            value: ${GIT_SOURCE_REF}
          - name: "GIT_REPOSITORY"
            value: ${GIT_SOURCE_URL}
          - name: "GIT_CREDENTIALS"
            value: ${GIT_SOURCE_SECRET}
    triggers:
      - type: "Generic"
        generic:
          allowEnv: true
          secret: ${GIT_SOURCE_SECRET}
- apiVersion: "v1"
  kind: "BuildConfig"
  metadata:
    name: ${APP_NAME}-run
  spec:
    source:
      dockerfile: |-
        FROM spring-boot-base
        COPY spring-boot-sample.jar /deployments/spring-boot-sample.jar
        EXPOSE 8080 8778 9779
      binary:
        asFile: spring-boot-sample.jar
      type: Docker
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: spring-boot-base:latest
      type: Docker
    output:
      to:
        kind: ImageStreamTag
        name: ${APP_NAME}:latest
    triggers: []
